import { botAvito } from "../avitoHandlers/bot.js";
import { interval } from "../handlers.js";
import dotenv from "dotenv";
import { bot_tg, prisma } from "../index.js";
import { updateMesseges } from "../avitoHandlers/parserAllChats.js";

dotenv.config();

export async function commandHandler() {
  let isWorking = false;

  bot_tg.on("text", async (msg) => {
    if (msg.text === "/start") {
      await bot_tg.sendMessage(
        msg.chat.id,
        "–ê–≤–∏—Ç–æ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã v2.0.0\n\n–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @GMTUSDT"
      );
    }
    if (msg.text === "/add") {
      try {
        isWorking = true;
        interval.make(botAvito, process.env.INTERVAL);
        await bot_tg.sendMessage(msg.chat.id, "üü¢");
      } catch (error) {
        await bot_tg.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞");
      }
    }
    if (msg.text === "/stop") {
      try {
        isWorking = false;
        interval.clearAll();
        await bot_tg.sendMessage(msg.chat.id, "üî¥");
      } catch (error) {
        await bot_tg.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞");
      }
    }
    if (msg.text === "/status") {
      let messageString = "C—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: ";
      messageString += isWorking ? "üü¢" : "üî¥";
      await bot_tg.sendMessage(msg.chat.id, messageString);
    }
    if (msg.text === "/update_clients") {
      try {
        const updatedCount = await updateMesseges();
        await bot_tg.sendMessage(msg.chat.id, `–î–æ–±–∞–≤–ª–µ–Ω–æ ${updatedCount}`);
      } catch (error) {
        await bot_tg.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
      }
    }
    if (msg.text === "/add_user") {
      try {
        await prisma.users.create({
          data: {
            idTg: msg.from.id,
          },
        });
        await bot_tg.sendMessage(msg.chat.id, "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞—Å—Å—ã–ª–∫—É.");
      } catch (error) {
        await bot_tg.sendMessage(msg.chat.id, "–í—ã —É–∂–µ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ.");
      }
    }
    if (msg.text === "/add_message") {
      try {
        await bot_tg.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–í–Ω–µ—à–Ω—è—è —Ä–µ–∫–ª–∞–º–∞", callback_data: "public_adv" }],
              [{ text: "–¢–µ–ª–µ–≥—Ä–∞–º–º", callback_data: "telegram" }],
              [{ text: "–ê–≤–∏—Ç–æ–ª–æ–≥", callback_data: "avitolog" }],
              [
                {
                  text: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –ê–≤–∏—Ç–æ",
                  callback_data: "analitics_for_avito",
                },
              ],
              [{ text: "–û–±—â–∏–π –æ—Ç–≤–µ—Ç", callback_data: "all" }],
              [{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
            ],
          },
        });
      } catch (error) {
        await bot_tg.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤");
      }
    }
  });
}
